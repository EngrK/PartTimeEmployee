package systemtry1;

import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.TimeZone;

abstract class MenuItem {
    private final String name;
    private final double price;

    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public abstract double calculateTotalPrice(int quantity);
}

class Appetizer extends MenuItem {
    public Appetizer(String name, double price) {
        super(name, price);
    }

    @Override
    public double calculateTotalPrice(int quantity) {
        return getPrice() * quantity;
    }
}

class MainCourse extends MenuItem {
    public MainCourse(String name, double price) {
        super(name, price);
    }

    @Override
    public double calculateTotalPrice(int quantity) {
        return getPrice() * quantity;
    }
}

class Beverage extends MenuItem {
    public Beverage(String name, double price) {
        super(name, price);
    }

    @Override
    public double calculateTotalPrice(int quantity) {
        return getPrice() * quantity;
    }
}

class Dessert extends MenuItem {
    public Dessert(String name, double price) {
        super(name, price);
    }

    @Override
    public double calculateTotalPrice(int quantity) {
        return getPrice() * quantity;
    }
}

public class SystemTry1 {
    public static void main(String[] args) {
        try (Scanner nc = new Scanner(System.in)) {
            System.out.println("     Welcome to the Group 2 Restaurant! ");
            System.out.println("     Gen. Trias Drive, Rosario Cavite ");
            System.out.println("\n================================================================= ");
            System.out.println("Good Day Maam/Sir!!");
            System.out.println("Please fill out the information. ");

            System.out.print("\nFirst Name: ");
            String FN = nc.nextLine();
            System.out.print("Surname: ");
            String SN = nc.nextLine();

            String nm = (FN + " " + SN);
            System.out.println("\nCustomer Name: " + nm);

            int numberOfPeople;
            do {
                try {
                    System.out.print("Enter the number of seats needed (maximum 30): ");
                    numberOfPeople = Integer.parseInt(nc.nextLine());
                    if (numberOfPeople > 30) {
                        System.out.println("Sorry, maximum number of seats exceeded. Please enter again.");
                        continue;
                    }
                    break;
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a valid number.");
                }
            } while (true);

            System.out.println("\nThank you! We will prepare it right away! ");
            System.out.println("\n================================================================= ");
            
            MenuItem[] appetizerMenu = readMenuItemsFromFile("appetizer_menu.txt");
            MenuItem[] mainCourseMenu = readMenuItemsFromFile("main_course_menu.txt");
            MenuItem[] beverageMenu = readMenuItemsFromFile("beverage_menu.txt");
            MenuItem[] dessertMenu = readMenuItemsFromFile("dessert_menu.txt");

            ArrayList<MenuItem> orderItems = new ArrayList<>();
            ArrayList<Integer> orderQuantities = new ArrayList<>();

            while (true) {
                try {
                    System.out.println("\nMenu:");
                    System.out.println("1. Appetizer");
                    System.out.println("2. Main Course");
                    System.out.println("3. Beverage");
                    System.out.println("4. Dessert");
                    System.out.println("0. Finish order");

                    System.out.print("Enter your choice: ");
                    int menuChoice = Integer.parseInt(nc.nextLine());

                    if (menuChoice == 0) {
                        System.out.println("\nDo you want to add more items? (Yes/No):");
                        String addMore = nc.nextLine().toLowerCase();

                        if (addMore.equals("yes")) {
                            continue;
                        } else {
                            break;
                        }
                    }

                    MenuItem[] selectedMenu = null;
                    String menuName = "";

                    switch (menuChoice) {
                        case 1 -> {
                            selectedMenu = appetizerMenu;
                            menuName = "Appetizer";
                        }
                        case 2 -> {
                            selectedMenu = mainCourseMenu;
                            menuName = "Main Course";
                        }
                        case 3 -> {
                            selectedMenu = beverageMenu;
                            menuName = "Beverage";
                        }
                        case 4 -> {
                            selectedMenu = dessertMenu;
                            menuName = "Dessert";
                        }
                        default -> {
                            System.out.println("Invalid choice. Please try again.");
                            continue;
                        }
                    }

                    System.out.println("\n" + menuName + " Menu:");
                    for (int i = 0; i < selectedMenu.length; i++) {
                        System.out.println((i + 1) + ". " + selectedMenu[i].getName() + " - PHP " + String.format("%.2f", selectedMenu[i].getPrice()));
                    }
                    System.out.println("0. Go back");

                    int choice = Integer.parseInt(nc.nextLine());
                    if (choice == 0) {
                        continue;
                    } else if (choice < 1 || choice > selectedMenu.length) {
                        System.out.println("Invalid choice. Please try again.");
                        continue;
                    }

                    System.out.print("Enter quantity: ");
                    int quantity = Integer.parseInt(nc.nextLine());
                    if (quantity <= 0) {
                        System.out.println("Invalid quantity. Please try again.");
                        continue;
                    }
                    MenuItem selectedItem = selectedMenu[choice - 1];
                    orderItems.add(selectedItem);
                    orderQuantities.add(quantity);
                    System.out.println("Item added to order.");
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a valid number.");
                }
            }

            // Display Current Order
            System.out.println("\nCurrent Order:");
            double subtotal = 0;
            for (int i = 0; i < orderItems.size(); i++) {
                MenuItem item = orderItems.get(i);
                int quantity = orderQuantities.get(i);
                double totalItemPrice = item.calculateTotalPrice(quantity);
                subtotal += totalItemPrice;
                System.out.println(item.getName() + "  x  " + quantity + " - PHP " + String.format("%.2f", totalItemPrice));
            }

            // Ask the user if they want to edit their order
            System.out.println("\nDo you want to edit your order? (Yes/No):");
            String editOrder = nc.next().toLowerCase();
            if (editOrder.equals("yes")) {
                while (!orderItems.isEmpty()) {
                    System.out.println("\nCurrent Order:");
                    for (int i = 0; i < orderItems.size(); i++) {
                        MenuItem item = orderItems.get(i);
                        int quantity = orderQuantities.get(i);
                        double totalItemPrice = item.calculateTotalPrice(quantity);
                        System.out.println((i + 1) + ". " + item.getName() + " x " + quantity + " - PHP " + String.format("%.2f", totalItemPrice));
                    }

                    System.out.print("\nEnter the index of the item to remove (1-" + orderItems.size() + "), 0 to proceed to payment: ");
                    int removeChoice = nc.nextInt();
                    if (removeChoice == 0) {
                        break;
                    } else if (removeChoice < 1 || removeChoice > orderItems.size()) {
                        System.out.println("Invalid index. Please try again.");
                        continue;
                    }

                    System.out.print("Enter the quantity to remove: ");
                    int removeQuantity = nc.nextInt();

                    if (removeQuantity <= 0 || removeQuantity > orderQuantities.get(removeChoice - 1)) {
                        System.out.println("Invalid quantity. Please try again.");
                        continue;
                    }

                    int remainingQuantity = orderQuantities.get(removeChoice - 1) - removeQuantity;
                    if (remainingQuantity == 0) {
                        orderItems.remove(removeChoice - 1);
                        orderQuantities.remove(removeChoice - 1);
                    } else {
                        // Update the quantity of the item
                        orderQuantities.set(removeChoice - 1, remainingQuantity);
                    }
                    System.out.println("Quantity removed.");
                }
            }

            // Ask the user if she/he is a SC or PWD
            System.out.println("\nAre you a senior citizen or a person with disability (PWD)? (Yes/No):");
            String isSeniorOrPwd = nc.next().toLowerCase();
            boolean eligibleForDiscount = isSeniorOrPwd.equals("yes");

            double discount = 0;
            if (eligibleForDiscount) {
                discount = subtotal * 0.20;
                subtotal -= discount;
            }

            double vatRate = 0.12; 
            double vat = subtotal * vatRate;
            double totalBill = subtotal + vat;

            // Display Receipt
            SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss ");
            Date date = new Date();
            String pstDate = sdfDate.format(date);
            String pstTime = sdfTime.format(date);
            System.out.println("===================================================================================== ");
            System.out.println("     Welcome To Group 2 Restaurant! ");
            System.out.println("   Gen. Trias Drive, Rosario Cavite ");
            TimeZone.setDefault(TimeZone.getTimeZone("Asia/Manila"));
            System.out.println(" Date:   " + pstDate + "  Time:   " + pstTime);
            System.out.println("\n-------- Bill for " + nm + " --------");
            System.out.println("\n          Receipt                 ");
            System.out.println("--------------------------------------------------------------");
            System.out.println("Item  " + "  Quantity " + "      Total ");
            System.out.println("                                                              ");
            for (int i = 0; i < orderItems.size(); i++) {
                MenuItem item = orderItems.get(i);
                int quantity = orderQuantities.get(i);
                double totalItemPrice = item.calculateTotalPrice(quantity);
                System.out.println(item.getName() + " x " + quantity + " - PHP " + String.format("%.2f", totalItemPrice));
            }
            System.out.println(" -------------------------------------------------------------     ");
            if (eligibleForDiscount) {
                System.out.println("Discount (20%): PHP -" + String.format("%.2f", discount));
            }
            System.out.println("Subtotal: PHP " + String.format("%.2f", subtotal));
            System.out.println("VAT (12%): PHP " + String.format("%.2f", vat));
            System.out.println("Total Bill (including tax): PHP " + String.format("%.2f", totalBill));
            System.out.println("--------------------------------------------------------------");

            // Payment Method
            System.out.println("\nSelect a payment method:");
            System.out.println("1. Cash");
            System.out.println("2. Credit Card");
            System.out.println("3. Debit Card");
            int paymentMethod = nc.nextInt();
            switch (paymentMethod) {
                case 1 -> {
                    System.out.print("Please enter the amount you will pay: ");
                    double paymentAmount = nc.nextDouble();
                    if (paymentAmount < totalBill) {
                        System.out.println("Insufficient payment. Payment not completed.");
                        return;
                    }
                    double change = paymentAmount - totalBill;
                    System.out.println("Your change is: PHP " + String.format("%.2f", change));
                    System.out.println("Thank you for ordering!");
                }
                case 2 -> {
                    while (true) {
                        try {
                            System.out.print("Please provide your credit card number (12 digits): ");
                            String creditCardNumber = nc.next();
                            if (creditCardNumber.length() != 12 || !creditCardNumber.matches("\\d+")) {
                                System.out.println("Invalid credit card number format. Please enter a 12-digit number.");
                                continue; 
                            }
                            System.out.println("How many months would you like to pay for (3/6/9/12)? ");
                            int months = nc.nextInt();
                            if (months != 3 && months != 6 && months != 9 && months != 12) {
                                System.out.println("Invalid choice. Please select 3, 6, 9, or 12 months.");
                                continue;
                            }
                            System.out.println("Payment successful. Thank you for ordering!");
                            break; 
                        } catch (Exception e) {
                            System.out.println("Error processing payment. Please try again.");       
                        }
                    }
                }
                case 3 -> {
                    while (true) {
                try {
                    System.out.print("Please provide your debit card number (12 digits): ");
                    String debitCardNumber = nc.next();
                    if (debitCardNumber.length() != 12 || !debitCardNumber.matches("\\d+")) {
                        System.out.println("Invalid debit card number format. Please enter a 12-digit number.");
                        continue; 
                    }
                    System.out.println("Payment successful. Thank you for ordering!");
                    break; 
                } catch (Exception e) {
                    System.out.println("Error processing payment. Please try again."); 
                        }
                    }
                }

                default -> System.out.println("Invalid payment method. Payment not completed.");
            }
        }
    }

    private static MenuItem[] readMenuItemsFromFile(String filename) {
        ArrayList<MenuItem> menuItems = new ArrayList<>();
        try {
            try (Scanner fileScanner = new Scanner(new File(filename))) {
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    String[] parts = line.split(",");
                    if (parts.length == 2) {
                        String name = parts[0].trim();
                        double price = Double.parseDouble(parts[1].trim());

                        menuItems.add(new Appetizer(name, price)); // Change to appropriate type based on filename
                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.err.println("Error: File not found - " + filename);
        } catch (NumberFormatException e) {
            System.err.println("Error: Invalid price format in file - " + filename);
        } catch (Exception e) {
            System.err.println("Error reading menu items from file - " + filename);
        }
        return menuItems.toArray(MenuItem[]::new);
    }
}
